#!/usr/bin/env bash

if ! hash gs 2>/dev/null; then
    echo "Could not find ghostscript, perhaps it isn't installed?"
    exit 1
fi

usage() {
cat <<HELP
Extracts a range of pages from a PDF

Usage: 
    $(basename "$0") START_PAGE PDF
        (removes all the pages prior to START_PAGE) 
    $(basename "$0") START_PAGE END_PAGE PDF
        (removes all the pages outside of START_PAGE and END_PAGE)


https://github.com/keithieopia/bin/

Copyright (c) 2016 Timothy Keith
Licensed under the MIT license.
HELP
}

extract() {
    # $1 - First page of the page range to extract
    # $2 - Last page of the range 
    # $3 - The actual name of the PDF
    gs -sDEVICE=pdfwrite -dNOPAUSE -dBATCH -dSAFER \
        -dFirstPage=${1} \
        -dLastPage=${2} \
        -sOutputFile="${3%.pdf}_p${1}-${2}.pdf" \
        "${3}"
}

if [ "$#" -eq 2 ]; then
    START="$1"
    shift 1
elif [ "$#" -eq 3 ]; then
    START="$1"
    END="$2"
    shift 2
else
    usage
    exit 1
fi

FILE="$@"

# Sanity checks
if [ ! -f "$FILE" ]; then
    echo "'$FILE' does not exist!"
    exit 1
else
    if ! file "$FILE" | grep -q "PDF document"; then
        echo "$FILE is not a valid PDF"
        exit 1
    else
        PAGES="$(pdfinfo "$FILE" | grep Pages | awk '{print $2}')"
    fi
fi

if [[ ! $START =~ ^-?[0-9]+$ ]]; then
    echo "$START is not a valid number"
    exit 1
fi

if [ -z ${END+x} ]; then
    END="$PAGES"
elif [[ ! $END =~ ^-?[0-9]+$ ]]; then
    echo "$END is not a valid number"
    exit 1
fi    
    
if [ $END -gt $PAGES ]; then
    echo "$END exceeds the number of pages in the PDF ($PAGES pages)"
    exit 1
elif [ $START -eq 1 ] && [ $END -eq $PAGES ]; then
    echo "Same page range given as what's in the PDF. There is nothing to do..."
    exit 1
fi




echo "Extracting pages $START-$END from $FILE"
extract $START $END "$FILE"
