#!/usr/bin/env bash

# port to use on the client for the SOCKS proxy 
LOCAL_PORT=50080

usage() {
cat <<HELP
Setup a proxy for Chromium using nothing more than a SSH server

usage: $(basename "$0") [SSH SERVER ADDRESS]

You will need to exchange SSH keys beforehand, as any prompts by SSH 
are currently not supported. You can still protect your keys with a 
password if you use ssh-agent 


https://github.com/keithieopia/bin

Copyright (c) 2017 Timothy Keith
Licensed under the MIT license.
HELP
}

# kill only ssh clients that are running on the specified port
# changing this might cause collateral damage to other ssh sessions
close_ssh() {
	if lsof -t -i tcp:$LOCAL_PORT > /dev/null; then
		kill $(lsof -t -i tcp:$LOCAL_PORT)
	fi
}

# close our forked ssh process when the browser (and this script) exits. 
# Otherwise, ssh will continue to run in the background
trap "close_ssh" INT TERM EXIT


# Process args
if [ ! -z "$1" ]; then
	if [ "$1" == "-h" ]; then
		# display help
		usage
		exit 0
	else
		if ping -c 1 "$1" &> /dev/null; then
			SERVER="$1"
		else
			echo "Can't ping given server"
			exit 1
		fi
	fi
else
	usage
	exit 1
fi


# Chromium won't allow multiple instances of the same profile, which 
# is a problem since we change the proxy settings below
if [ $(pgrep -cf chromium-browser) -gt 0 ]; then
	echo "Chromium is already running, please exit out of it first..."
	exit 1
fi


# Start SSH tunnel if needed
if ! lsof -i tcp:$LOCAL_PORT > /dev/null; then
	# if nothing is listening on the port, start ssh 

	# Given flags breakdown:
	#   -f        -> fork in background
	#   -C        -> enable compression for slow connections
	#   -N        -> no remote commands, just forward ports
	#   -D [PORT] -> bind to local port as a local SOCKS server

	ssh -fCNq -D $LOCAL_PORT "$(whoami)@${SERVER}" 2>/dev/null 1>&2
else
	# port is already in use by something. If it's ssh, we silently 
	# continue and use it. If not, throw an error
	if ! lsof -i tcp:$LOCAL_PORT | grep -q ssh; then
		echo "Something other than SSH is using port $LOCAL_PORT"
		exit 1
	fi
fi

# wait for the ssh tunnel to come up in case our connection is slow
while ! lsof -i tcp:$LOCAL_PORT > /dev/null; do
    ((c++)) && ((c==10)) && break
    sleep 1
done

# the above waiting didn't work, we can't continue without a ssh tunnel
if [[ "$c" -eq 10 ]]; then
	echo "Could not setup SSH tunnel!"
	exit 1
fi

# Start browser 
chromium-browser --proxy-server="socks5://127.0.0.1:${LOCAL_PORT}" --host-resolver-rules="MAP * 0.0.0.0 , EXCLUDE localhost"
