#!/bin/sh

LOG=$HOME/.timeclock.log

if [ ! -f $LOG ]; then
	touch $LOG
fi

BIWEEKLY_OFFSET=0
BIWEEKLY_KNOWN="2019-01-21"
BIWEEKLY_START=$(date -jf "%Y-%m-%d %H%M%S" "$BIWEEKLY_KNOWN 000000" +%s)

while [ $(date +%s) -gt $BIWEEKLY_START ]; do
	BIWEEKLY_OFFSET=$(echo "${BIWEEKLY_OFFSET} + 14" | bc)
	BIWEEKLY_START=$(date -v+${BIWEEKLY_OFFSET}d -jf "%Y-%m-%d %H%M%S" "${BIWEEKLY_KNOWN} 000000" +%s)
done

PERIOD_START=$(date -v-14d -jf "%s" $BIWEEKLY_START "+%s")
PERIOD_END=$(date -v-1d -jf "%s" $BIWEEKLY_START "+%s")

LINES=$(wc -l $LOG | awk '{print $1}')


human_hours() {
	h=$(echo "${1}/3600" | bc)
	m=$(echo "(${1}%3600)/60" | bc)
	printf "%01d:%02d\n" $h $m
}

log() {
	SET=$LINES
	PREVDATE="0000"

	while [ $SET -gt 0 ]; do
		LINE=$(awk "NR==$SET" $LOG)
		START=$(echo $LINE | awk '{print $1}')
		END=$(echo $LINE | awk '{print $2}')

		CURRDATE=$(date -jf '%s' $START '+%m%d')
		if [ "$PREVDATE" -eq "$CURRDATE" ]; then
			echo -n "      | "
			echo -n $(date -jf '%s' $START '+%I:%M %p') 
		else
			echo -n $(date -jf '%s' $START '+%m/%d | %I:%M %p')
		fi
		PREVDATE=$CURRDATE

		if [ -z $END ]; then 
			echo " ~ " 
		else
			echo -n " - "
			date -jf '%s' $END '+%I:%M %p'
		fi
		
		SET=$(echo "$SET - 1" | bc)
	done
}

payperiod_total() {
	WORKED=0
	SET=$LINES

	while [ $SET -gt 0 ]; do
		LINE=$(awk "NR==$SET" $LOG)
		START=$(echo $LINE | awk '{print $1}')
		END=$(echo $LINE | awk '{print $2}')

		if [ ! -z $END ] && \
		   [ $START -gt $PERIOD_START ] && \
		   [ $START -lt $PERIOD_END ]; then

			WORKED=$(echo "($END - $START) + $WORKED" | bc)
		fi

		SET=$(echo "$SET - 1" | bc)
	done

	echo -n "PAYPERIOD:    "
	human_hours $WORKED
}


OUT="$(date -jf '%s' $PERIOD_START '+%-m/%d') -"
OUT="$OUT $(date -jf '%s' $PERIOD_END '+%-m/%d')"
OUT="$OUT | $(echo "($PERIOD_END - $(date +%s)) / 86400" | bc) days left"

echo $OUT
printf -- '-%.0s' $(seq $(echo -n $OUT | wc -c)) # draws a line
echo -e "\n"


case $1 in
	start)
		if [ "$(tail -1 $LOG | wc -w)" -eq 1 ]; then
			echo "ERROR: already clocked in"
			exit 1
		fi

		echo -n $(date +%s) >> "$LOG"

		echo "STATUS:       started working"

		payperiod_total
		;;

	stop)
		if [ "$(tail -1 $LOG | wc -w)" -eq 2 ]; then
			echo "ERROR:        already clocked out"
			exit 1
		fi

		echo "STATUS:       stopped working"

		START=$(tail -1 $LOG | awk '{print $1}')
		END=$(date +%s)

		echo " $END" >> $LOG

		echo -n "HOURS WORKED: "
		human_hours $(echo "$END - $START" | bc)
		
		payperiod_total
		;;

	log)
		log
		;;

	*)
		if [ "$(tail -1 $LOG | wc -w)" -eq 1 ]; then
			echo "STATUS:       on the clock "
		
			START=$(tail -1 $LOG | awk '{print $1}')
			END=$(date +%s)

			echo -n "STARTED:      $(date -jf '%s' $START '+%-I:%M %p') ("

			echo -n $(human_hours $(echo "$END - $START" | bc))
			echo " hours)"
		else
			echo "STATUS:       clocked out"
		fi

		payperiod_total
		;;
esac