#!/usr/bin/env bash

usage () {
cat <<HELP
Creates and opens encrypted containers

Usage: $(basename "$0") [-p DIR] [-m DIR] CONTAINER
   -c : Container directory, without trailing slash 
        (Default: /home/[USER]/.private)
   -m : Mount point, without trailing slash
        (Default: /mnt)

Note:
   $(basename "$0") has built-in sane defaults, only
   advanced users should set the above flags


https://github.com/keithieopia/bin/

Copyright (c) 2016-2017 Timothy Keith
Licensed under the MIT license.
HELP
}

colorize () {
    case ${1:-NORMAL} in
		TITLE)
			tput bold
			tput setaf 7
			;;
		ERROR)
			tput setaf 1
			;;
		SUCCESS)
			tput setaf 2
			;;
		WARN)
			tput setaf 3
			;;
		PROMPT)
			tput bold
			tput setaf 7
			;;
		OPTION)
			tput dim
			tput setaf 7
			;;
    esac

    cat
    tput sgr0
}

function unlockContainer() {
    echo -n "Password?: " | colorize PROMPT
    read -s PASSWORD
    echo

    echo -n $PASSWORD | sudo cryptsetup --key-file "-" luksOpen $CONTAINER_DIR/$1 $1 || {
        echo "Could not open encrypted container!" | colorize ERROR
        exit 1
    }
}

function mountContainer() {

    if [ ! -d $MOUNT_DIR/$1 ]; then
        mkdir -p $MOUNT_DIR/$1
    fi

    mount -o noatime,nodev,nosuid /dev/mapper/$1 $MOUNT_DIR/$1
}

function makeContainer() {
    echo "Container '$1' doesn't exist" | colorize ERROR
    echo
    echo -n "Create container? (y/N): " | colorize PROMPT
    read answer
    echo

    case ${answer:0:1} in
        y|Y)
            #
            # Ask for new password
            #
            while [ -z "$PASSWORD" ]; do
                echo -n "Password?: " | colorize PROMPT
                read -s PASSWORD1
                echo

                echo -n "Confirm password?: " | colorize PROMPT
                read -s PASSWORD2
                echo

                if [ "$PASSWORD1" = "$PASSWORD2" ]; then
                    PASSWORD=$PASSWORD1
                else
                    echo "Passwords did not match!" | colorize ERROR
                    echo
                fi
            done

            echo

            echo -n "Size of container?: " | colorize PROMPT
            read SIZE
            echo

            echo -n "Use defaults for encryption? (Y/n): " | colorize PROMPT
            read answer
            echo

            case ${answer:0:1} in
                n|N)
                    while [ -z "$HASH" ]; do
                        echo "Choose a PBKDF2 hash algorithm:" | colorize TITLE
                        echo " 1. sha1" | colorize OPTION
                        echo " 2. sha256" | colorize OPTION
                        echo " 3. sha512" | colorize OPTION
                        echo " 4. ripemd160" | colorize OPTION
                        echo " 5. whirlpool" | colorize OPTION
                        echo
                        echo -n "Hash? (1-5): " | colorize PROMPT
                        read answer

                        case ${answer} in
                            sha1|1)
                                HASH="sha1"
                                ;;
                            sha256|2)
                                HASH="sha256"
                                ;;
                            sha512|3)
                                HASH="sha512"
                                ;;
                            ripemd160|4)
                                HASH="ripemd160"
                                ;;
                            whirlpool|5)
                                HASH="whirlpool"
                                ;;
                            *)
                                echo "Invalid hash!" | colorize WARN
                                echo
                                ;;
                        esac
                    done

                    echo

                    while [ -z "$CIPHER" ]; do
                        echo "Choose an encryption algorithm:" | colorize TITLE
                        echo " 1. aes" | colorize OPTION
                        echo " 2. twofish" | colorize OPTION
                        echo " 3. serpent" | colorize OPTION
                        echo
                        echo -n "Cipher? (1-3): " | colorize PROMPT
                        read answer

                        case ${answer} in
                            aes|1)
                                CIPHER="aes"
                                ;;
                            twofish|2)
                                CIPHER="twofish"
                                ;;
                            serpent|3)
                                CIPHER="serpent"
                                ;;
                            *)
                                echo "Invalid algorithm!" | colorize WARN
                                echo
                                ;;
                        esac
                    done

                    echo

                    while [ -z "$BITS" ]; do
                        echo "Choose a key size, note XTS cuts the actual bits in half:" | colorize TITLE
                        echo " 1. 256" | colorize OPTION
                        echo " 2. 512" | colorize OPTION
                        echo
                        echo -n "Bits? (1-2): " | colorize PROMPT
                        read answer

                        case ${answer} in
                            256|1)
                                BITS="256"
                                ;;
                            512|2)
                                BITS="512"
                                ;;
                            *)
                                echo "Invalid key size!" | colorize WARN
                                echo
                                ;;
                        esac
                    done
                    ;;
                *)
                    HASH="sha512"
                    CIPHER="aes"
                    BITS="256"
                    ;;
            esac

            echo

            # Create private directory if it doesn't exist
            if [ ! -d $CONTAINER_DIR ]; then
                mkdir $CONTAINER_DIR
                chown $WHOAMI $CONTAINER_DIR
                chmod 700 $CONTAINER_DIR
            fi

            # Make the container
            truncate -s $SIZE $CONTAINER_DIR/$1
            chown $WHOAMI $CONTAINER_DIR/$1
            chmod 600 $CONTAINER_DIR/$1

            # Encrypt and open container
            echo -n $PASSWORD | sudo cryptsetup --hash $HASH --cipher $CIPHER-xts-plain64 --key-size $BITS --key-file "-" luksFormat $CONTAINER_DIR/$1
            echo -n $PASSWORD | sudo cryptsetup --key-file "-" luksOpen $CONTAINER_DIR/$1 $1

            # Make the filesystem
            mkfs.ext4 -L $1 /dev/mapper/$1
            tune2fs -m 0 /dev/mapper/$1

            mountContainer $1

            # Fix permissions on the mounted container
            sudo chown $WHOAMI $MOUNT_DIR/$1
            chmod 700 $MOUNT_DIR/$1
            ;;

        *)
            echo "$CONTAINER_DIR/$1 does not exist, not creating it" | colorize ERROR
            exit 1
            ;;
    esac
}


if [ "$(id -u)" != "0" ]; then
    if [ -z "$SUDO_COMMAND" ]; then
		echo "This script must be run as root, recalling self with sudo..." | colorize WARN
        sudo $0 $*
        exit 0
    else
		echo "This script must be run as root" | colorize ERROR
		exit 1
	fi
fi

MOUNT_DIR="/mnt"
WHOAMI=${SUDO_USER:-$(whoami)}
CONTAINER_DIR="/home/${WHOAMI}/.nullcrypt-store"

while [ "$1" != "" ]; do
case $1 in
    -c )
        shift
        CONTAINER_DIR=$1
        ;;
    -m )
        shift
        MOUNT_DIR=$1
        ;;
    -h )
        usage
        exit
        ;;
    * )
        if mount | awk '{print $3}' | grep -w "$MOUNT_DIR/$1" > /dev/null; then

            umount $MOUNT_DIR/$1
            rmdir $MOUNT_DIR/$1
            cryptsetup luksClose $1
            echo "$1 successfully closed!" | colorize SUCCESS
            exit
        elif [ ! -f $CONTAINER_DIR/$1 ]; then
            makeContainer $1
            echo "$1 successfully opened!" | colorize SUCCESS
            exit
        else
            unlockContainer $1
            mountContainer $1

            echo "$1 successfully opened!" | colorize SUCCESS
            exit
        fi
        ;;
    esac
    shift
done

if [ ! -n "$1" ]; then
    usage
    exit 1
fi 

