#!/bin/bash


DRIVE="/media/$(whoami)/laptop-backup"
DATE="$(date +%Y%m%d)"

read -r -d '' EXCLUDE <<EOF
--exclude ".antigen"
--exclude ".cache" 
--exclude ".config/chromium"
--exclude ".config/dconf"
--exclude ".config/dolphinrc"
--exclude ".config/konsolerc"
--exclude ".config/pulse"
--exclude ".config/session"
--exclude ".dbus"
--exclude ".ecryptfs"
--exclude ".kde/cache-$(hostname)" 
--exclude ".kde/socket-$(hostname)"
--exclude ".kde/tmp-$(hostname)"
--exclude ".kde/share/apps/RecentDocuments"
--exclude ".pki"
--exclude ".Private"
--exclude ".steam*"
--exclude ".local/share/kcookiejar"
--exclude ".local/share/klipper"
--exclude ".local/share/Steam" 
--exclude ".local/share/RecentDocuments"
--exclude ".local/share/Trash" 
--exclude ".local/share/vulkan"
--exclude ".wine/dosdevices"
--exclude ".wine/drive_c/windows"
--exclude ".zsh_history"
--exclude "Dropbox/.dropbox"
--exclude "Dropbox/.dropbox.cache"
--exclude "Private"
EOF

###############################################################################
# TARGETS

backup_home() {
    BACKUP_FREE=$(/bin/df $DRIVE | tail -1 | awk '{print $4}')
    HOME_SIZE=$(/usr/bin/du -s $HOME $EXCLUDE | awk '{print $1}')

    if [ "$BACKUP_FREE" -lt "$HOME_SIZE" ]; then
        echo "There is not enough free space on backup drive!"
        exit 1
    fi

    if [ ! -d "${DRIVE}/$(hostname)-home" ]; then
        mkdir -p "${DRIVE}/$(hostname)-home"
    fi

    tar cfp - "$HOME" -P $EXCLUDE  | \
    pv -W -s $(du -sb "$HOME" $EXCLUDE | awk '{print $1}') | \
    pbzip2 -c | \
    gpg --symmetric --cipher-algo AES128 --output "${DRIVE}/$(hostname)-home/${DATE}.tbz.gpg"
}

backup_private() {
    if mount | grep -q "$HOME/Private"; then
        echo "Skipping mounted private dir..."
    else
        BACKUP_FREE=$(/bin/df "$DRIVE" | tail -1 | awk '{print $4}')
        PRIVATE_SIZE=$(/usr/bin/du -s "$HOME/.Private" | awk '{print $1}')

        if [ "$BACKUP_FREE" -lt "$PRIVATE_SIZE" ]; then
            echo "Not enough free space to backup private dir"
        else
            if [ ! -d "${DRIVE}/$(hostname)-private" ]; then
                mkdir -p "${DRIVE}/$(hostname)-private"
            fi

            tar cfp - "$HOME/.Private" "$HOME/.ecryptfs" -P | \
            pv -W -s $(du -sb "$HOME/.Private" | awk '{print $1}') | \
            pbzip2 -c > "${DRIVE}/$(hostname)-private/${DATE}.tbz"
        fi
    fi
}

backup_media() {
    MEDIA="/mnt/tv-movies"

    if [ ! -d "$MEDIA" ]; then
        echo "Could not find media drive!"
        exit 1
    fi

    BACKUP_FREE=$(/bin/df "$DRIVE" | tail -1 | awk '{print $4}')
    MEDIA_SIZE=$(/usr/bin/du -s "$MEDIA" --exclude "lost+found" | awk '{print $1}')

    if [ "$BACKUP_FREE" -lt "$MEDIA_SIZE" ]; then
        echo "Not enough free space to backup media!"
        exit 1
    else
        tar cfp - "$MEDIA" -P --exclude "lost+found" --exclude ".Trash-1000" | \
        pv -W -s $(du -sb "$MEDIA" --exclude "lost+found" --exclude ".Trash-1000" | awk '{print $1}') | \
        pbzip2 -c > "${DRIVE}/$(hostname)-media/${DATE}.tbz"
    fi
}

###############################################################################
# LOGIC

# run with low priority
#ionice -c 3 -p $$
#renice +12 -p $$

# Ensure the target exists
if [ ! -d "$DRIVE" ]; then
    echo "Backup drive not mounted!"
    exit 1
fi

if [ -z "$@" ]; then
    case "$(hostname)" in
        "deli")
            backup_home
            backup_private
            ;;

        "minime")
            backup_media
            ;;

        *)
            echo "I'm not programmed to automatically backup this host. Please specify a target instead!"
            exit 1
            ;;
    esac
else
    for target in "$@"; do
        if type "backup_${target}" | grep -q 'function' 2>/dev/null; then
            eval backup_${target}
        else
            echo "Unknown target: $target"
        fi
    done
fi
