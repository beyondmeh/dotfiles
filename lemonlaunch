#!/bin/bash

# Colors
C_FG="#808080"
C_BG="#1A1A1A"
C_SEPARATOR="#000000"
C_TITLE="#ADD8E6"
C_BRACKETS="#FFFFFF"
C_RED="#A52A2A"
C_YELLOW="#FFA500"
C_GREEN="#008000"

# Separator character
SEPARATOR="|"

# Network Interface
NET_IFACE="wlp1s0"

NET_CLICK="vnstati -nh -s -hs -i $IFACE -o '/tmp/vnstat.png'; xdg-open '/tmp/vnstat.png'"
VOL_RCLICK="~/bin/volume toggle"
VOL_LCLICK="pavucontrol -t 3"
CPU_CLICK="sakura -x top"
MEM_CLICK="sakura -x top"

# File systems to monitor
FILESYS=("/dev/mapper/storage-root" "/dev/mapper/storage-home")

# Font
FONT_FACE="snap"
FONT_SIZE="10"

# Height of bar
HEIGHT="20"

# Width of bar
WIDTH="max"

# Vertical position of bar
POSITION="bottom"

##### DO NOT EDIT BELOW ########################################################

if [ "$1" == "-h" ]; then
cat <<HELP 
Start dzen2 panel with useful system info, similar to conky

Note: 
   Edit the variables at the top of $(basename "$0") to customize 
   
   
https://github.com/keithieopia/bin/
    
Copyright (c) 2016 Timothy Keith
Licensed under the BSD 2-clause license.
HELP
exit
fi

have() { type "$1" &> /dev/null; }
if ! have lemonbar; then
    echo "$0 requires 'lemonbar' to be installed!"
    exit 1
fi
if ! have xdotool; then
    echo "$0 requires 'xdotool' to be installed!"
    exit 1
fi
if ! have amixer; then
    echo "$0 requires 'alsa-utils' to be installed!"
    exit 1
fi
if ! have xprop; then
    echo "$0 requires 'xorg-xprop' to be installed!"
    exit 1
fi

FONT="-*-$FONT_FACE-*-r-*-*-$FONT_SIZE-*-*-*-*-*-*-*"
LEMONBAR_ARGS="-f $FONT -F $C_FG -B $C_BG -b -p"

# Used to monitor file changes and reload, similar to how conky works
HASH=$(md5sum "$0" | cut -c 1-32)
   
# Formatting
SEPARATOR="%{F$C_SEPARATOR}$SEPARATOR%{F$C_FG}"

in_brackets () {
    echo -n "%{F$C_BRACKETS}["
    echo -n "%{F$C_FG}$1"
    echo -n "%{F$C_BRACKETS}]"
}


# Generate Information
get_uptime () {
    UPTIME=$(uptime | awk '{print $1}')
    
    echo -n "$(in_brackets $UPTIME)"
}

get_workspaces () {
    NUM_WORKSPACE=$(xdotool get_num_desktops)
    CUR_WORKSPACE=$(xdotool get_desktop)
    NAMES=$(xprop -root _NET_DESKTOP_NAMES | sed -e 's/_NET_DESKTOP_NAMES(UTF8_STRING) = //g' | tr -d '\",')


    for (( c=1; c<=$NUM_WORKSPACE; c++ )); do
        [ $CUR_WORKSPACE -eq $(($c-1)) ] && C_WORKSPACE="$C_TITLE" || C_WORKSPACE="$C_FG"
    
        NAME=$(echo $NAMES | awk -v c=$c '{print $c}')
    
    
        workspace="%{F$C_WORKSPACE}$NAME"
        
        echo -n "%{A:xdotool set_desktop $(($c-1)):}"
        echo -n "$(in_brackets $workspace)"
        echo -n "%{A}"
    done
}

get_battery () {
    BATTERY="$(cat /sys/class/power_supply/BAT1/capacity)"
    STATUS="$(cat /sys/class/power_supply/BAT1/status)"
    
    if [ $BATTERY -le 25 ]; then
        C_BATT="$C_YELLOW"
    elif [ $BATTERY -le 10 ]; then
        C_BATT="$C_RED"
    else
        C_BATT="$C_GREEN"
    fi

    echo -n "%{F$C_TITLE}Batt: "

    if [ "$STATUS" == "Charging" ]; then
        echo -n "%{F$C_BATT}$BATTERY%%"
        echo -n "%{F$C_FG}+"
    elif [ "$STATUS" == "Discharging" ]; then
        echo -n "%{F$C_BATT}$BATTERY%%"
        echo -n "%{F$C_FG}-"
    else
        echo -n "%{F$C_FG}$BATTERY%%"
    fi
}

get_volume () {
    VOLUME=$(awk '/%/ {gsub(/[\[%\]]/,""); print $5}' <(amixer sget Master) | head -1)

    if `amixer -D pulse get Master | tail -1 | grep off > /dev/null`; then
        C_VOL="$C_RED"
    else
        C_VOL="$C_FG"
    fi
    
    echo -n "%{A:$VOL_LCLICK:}%{A3:$VOL_RCLICK:}"
    echo -n "%{F$C_TITLE}Vol: "
    echo -n "%{F$C_VOL}$VOLUME%%"
    echo -n "%{A3}%{A}"
}

get_net () {
    IFSTAT="$(ifstat $NET_IFACE | grep $NET_IFACE)"
    NET_RX=$(echo $IFSTAT | awk '{print $2}')
    NET_TX=$(echo $IFSTAT | awk '{print $4}')

    echo -n "%{A:$NET_CLICK:}"
    echo -n "%{F$C_TITLE}Net: "
    echo -n "%{F$C_FG}${NET_RX}d ${NET_TX}u"
    echo -n "%{A}"
}

get_mem () {
    USED="$(free | grep Mem | awk '{ printf("%.0f", $3/$2 * 100.0) }')"

    [ $USED -ge 95 ] && C_MEM="$C_RED" || C_MEM="$C_FG"

    echo -n "%{A:$MEM_CLICK:}"
    echo -n "%{F$C_TITLE}Mem: "
    echo -n "%{F$C_MEM}$USED%%"
    echo -n "%{A}"
}

get_cpu () {
    VMSTAT="$(vmstat | tail -1)"
    SYS="$(echo $VMSTAT | awk '{ print $14 }')"
    USR="$(echo $VMSTAT | awk '{ print $13 }')"

    if [ $USR -ge 75 ]; then
        C_USR="$C_YELLOW"
    elif [ $USR -ge 90 ]; then
        C_USR="$C_RED"
    else
        C_USR="$C_FG"
    fi

    if [ $SYS -ge 75 ]; then
        C_SYS="$C_YELLOW"
    elif [ $SYS -ge 90 ]; then
        C_SYS="$C_RED"
    else
        C_SYS="$C_FG"
    fi

    echo -n "%{A:$CPU_CLICK:}"
    echo -n "%{F$C_TITLE}CPU: "
    echo -n "%{F$C_FG}u: %{F$C_USR}$USR%% "
    echo -n "%{F$C_FG}s: %{F$C_SYS}$SYS%%"
    echo -n "%{A}"
}

get_diskspace () {
    echo -n "%{F$C_TITLE}FS: "
    
    COUNT=1
    NUMFS=${#FILESYS[@]}
    
    for fs in "${FILESYS[@]}"; do
        DF=$(/usr/bin/df | grep "$fs")
        USED="$( echo "$DF" | awk '{ print $5 }' | sed -r 's/[%]+//' )"
        NAME="$( echo "$DF" | awk '{ print $6 }' )"
        
        [ $USED -ge 90 ] && C_DISK="$C_RED" || C_DISK="$C_FG"
    
        echo -n "%{A:xdg-open $NAME:}"
        echo -n "%{F$C_FG}$NAME: "
        echo -n "%{F$C_DISK}$USED%%"
        echo -n "%{A}"
        
        [ $COUNT -eq $NUMFS ] && SPACE="" || SPACE=" "
        echo -n "$SPACE"
        ((COUNT++))
    done
}


while true; do

    echo -n "$(get_workspaces)"    

    echo -n "%{c}"

    echo -n "$(get_diskspace)"
    echo -n " $SEPARATOR "
    echo -n "$(get_cpu)"
    echo -n " $SEPARATOR "
    echo -n "$(get_mem)"
    echo -n " $SEPARATOR "
    echo -n "$(get_net)"
    echo -n " $SEPARATOR "
    echo -n "$(get_volume)"
    echo -n " $SEPARATOR "
    echo -n "$(get_battery)"

    echo -n "%{r}$(get_uptime)"
        
    # Reload self on change
    if [[ $(md5sum "$0" | cut -c 1-32) == "$HASH" ]]; then
        echo # Send newline
        sleep 1
    else
        killall lemonbar
        exec $0 &
        exit
    fi
    #echo 
    #sleep 1
done | lemonbar $LEMONBAR_ARGS | sh

exit 0
