user www-data;
worker_processes  auto;
pid /run/nginx.pid;

events {
    worker_connections 768;
}

http {

	##
	## Basic Settings
	##
    
    server_tokens       off; # don't display version numbers 
    sendfile            on;
    tcp_nopush          on;
	tcp_nodelay         on;
    keepalive_timeout   65;

	types_hash_max_size 2048;

	# MIME Types
	include /etc/nginx/mime.types;
	default_type application/octet-stream;

	charset utf-8;


	##
    ## Compression
    ##
    
    gzip               on;
	gzip_disable       "msie6";   # sigh...
    gzip_comp_level    5;   # 1-9, 5 is a sane default
    gzip_min_length    256; # Don't compress small things
    gzip_proxied       any;
    gzip_vary          on;

    # Compress all output labeled with one of the following MIME-types.
    gzip_types
        # text/html # always compressed by HttpGzipModule
		text/plain 
		text/css 
		text/javascript
		application/javascript 
		application/json 
		text/xml
		application/xml
		application/atom+xml
		application/rss+xml
		application/x-font-ttf
		font/opentype
		image/svg+xml
		image/x-icon
		text/x-component;
    
	##
	## Logging & Vistor Privacy
	##

	# Remove last byte from IP, e.g.: 10.0.0.x
    map $remote_addr $ip_anonym1 {
     default 0.0.0;
     "~(?P<ip>(\d+)\.(\d+)\.(\d+))\.\d+" $ip;
     "~(?P<ip>[^:]+:[^:]+):" $ip;
    }

    map $remote_addr $ip_anonym2 {
     default .0;
     "~(?P<ip>(\d+)\.(\d+)\.(\d+))\.\d+" .0;
     "~(?P<ip>[^:]+:[^:]+):" ::;
    }

    map $ip_anonym1$ip_anonym2 $ip_anonymized {
     default 0.0.0.0;
     "~(?P<ip>.*)" $ip;
    }

    log_format anonymized '$ip_anonymized - $remote_user [$time_local] '
       '"$request" $status $body_bytes_sent '
       '"$http_referer" "$http_user_agent"';

	# logging
    access_log /var/log/nginx/access.log anonymized;
	error_log /var/log/nginx/error.log; # error_log doesn't support log_format yet...


	##
    ## SSL Settings
	##

    # Better SSL Ciphers: https://weakdh.org/sysadmin.html
    #ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';
    #ssl_dhparam /etc/ssl/dhparams.pem;
    
    #ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    #ssl_prefer_server_ciphers on;
    #ssl_session_cache builtin:1000 shared:SSL:10m;
    #ssl_stapling on;

    # This looks wrong, but Let's Encrypt stores different hosts under the
    # first requested host's name.
    #
    # Example: aaa.com and bbb.com would both in aaa.com/fullchain.pem
    #ssl_certificate /etc/letsencrypt/live/keithieopia.com/fullchain.pem;
    #ssl_certificate_key /etc/letsencrypt/live/keithieopia.com/privkey.pem;

    # localhost has our default settings so nginx doesn't
    # complain about "duplicate listen options"
    include /etc/nginx/sites-available/localhost.conf;


    
	include /etc/nginx/sites-enabled/*;
}
