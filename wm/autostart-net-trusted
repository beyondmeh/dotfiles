#!/bin/bash

# autostart-net-trusted
# Only start selected services on a trusted network (home, work, friends, etc)

colorize () {
    SUCCESS="0;32"
    WARN="0;33"
    ERROR="0;31"
    ESC="\033["

    COLOR=\$${1:-NORMAL}

    echo -ne "${ESC}`eval echo ${COLOR}`m"
    cat
    echo -ne "${ESC}0m"
}

 if [ "$EUID" -ne 0 ]; then
    if [ -z "$SUDO_COMMAND" ]; then
        echo "This script must be run as root, recalling self with sudo..." | colorize WARN
        sudo $0 $*
        exit 0
    else
        echo "This script must be run as root" | colorize ERROR
        exit 1
    fi
fi

# $TRUSTED_MACS is a list of trusted router MAC addresses separated by spaces;
# basically my home, work, and friend's router's MAC. For example:
#
# TRUSTED_MACS="AA:BB:CC:DD:EE:FF 12:34:56:78:90:AB"
#
# Since I don't want make my actual MACs public in git, they are set in the 
# ~/.bash_secrets untracked file. Should you want to set them here, remove the 
# below source line:
source /home/$SUDO_USER/.bash_secrets

if [[ -z "$TRUSTED_MACS" ]]; then
    echo "TRUSTED_MACS is not set!" | colorize ERROR
    exit 1
fi

# $SERVICES is an array of systemd services to start on these trusted network
SERVICES=("mediatomb" "smbd" "org.cups.cupsd")

if [[ -z "$SERVICES" ]]; then
    echo "SERVICES is not set!" | colorize ERROR
    exit 1
fi


# Wait a maximum of one minute for network connectivity 
# then die if we don't get it 
ROUTE=$(ip route show match 0/0)

n=0
while [ -z "$ROUTE" ]; do
    n=$[$n+1]
    
    if [ $n -ge 6 ]; then
        echo "No network connectivity after 1 minute!" | colorize ERROR
        exit 1
    else
        echo "No network connectivity, sleeping..." | colorize WARN
        sleep 10
        ROUTE=$(ip route show match 0/0)
    fi
done


# Get the current gateway MAC
GATEWAY_IP=$(echo $ROUTE | awk '{print $3}')
GATEWAY_MAC=$(ip neigh | grep $GATEWAY_IP | awk '{print $5}')

if grep -q "$GATEWAY_MAC" <<< "$TRUSTED_MACS"; then
    echo "Trusted network, starting services:" | colorize SUCCESS
    
    for service in "${SERVICES[@]}"; do
        if systemctl is-active $service >/dev/null; then
            echo "    $service already running, skipping..." | colorize WARN
        else
            echo "    Starting $service..." | colorize SUCCESS
            systemctl start $service
        fi
    done
else
    echo "Untrusted network!" | colorize ERROR
fi
