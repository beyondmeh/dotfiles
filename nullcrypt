#!/bin/bash
# Encrypted Container Wrapper

# Copyright (c) 2016 Timothy Keith
# The BSD 2-Clause License (BSD) https://opensource.org/licenses/BSD-2-Clause

PRIVATE_DIR="$HOME/.private"
MOUNT_DIR="/mnt"
WHOAMI=${SUDO_USER:-$(whoami)}

source /home/$WHOAMI/bin/colorize

function unlockContainer() {
    echo -n "Password?: " | colorize GRAY
    read -s PASSWORD
    echo

    echo -n $PASSWORD | sudo cryptsetup --key-file "-" luksOpen $PRIVATE_DIR/$1 $1 || {
        echo "Could not open encrypted container!" | colorize BOLD RED
        exit 1
    }
}

function mountContainer() {

    if [ ! -d $MOUNT_DIR/$1 ]; then
        sudo mkdir -p $MOUNT_DIR/$1
    fi

    sudo mount -o noatime,nodev,nosuid /dev/mapper/$1 $MOUNT_DIR/$1
}

function makeContainer() {
    echo "Container '$1' doesn't exist; create it?" | colorize BOLD WHITE
    echo -n "(y/N): " | colorize WHITE
    read answer
    echo

    case ${answer:0:1} in
        y|Y)
            #
            # Ask for new password
            #
            while [ -z "$PASSWORD" ]; do
                echo -n "Password?: " | colorize WHITE
                read -s PASSWORD1
                echo

                echo -n "Confirm password?: " | colorize WHITE
                read -s PASSWORD2
                echo

                if [ "$PASSWORD1" = "$PASSWORD2" ]; then
                    PASSWORD=$PASSWORD1
                else
                    echo "Passwords did not match!" | colorize RED
                    echo
                fi
            done

            echo

            echo -n "Size of container?: " | colorize WHITE
            read SIZE
            echo

            echo "Use default options for encryption?" | colorize BOLD WHITE
            echo -n "(Y/n): " | colorize WHITE
            read answer
            echo

            case ${answer:0:1} in
                n|N)
                    while [ -z "$HASH" ]; do
                        echo "Choose a PBKDF2 hash algorithm:" | colorize BOLD WHITE
                        echo " 1. sha1" | colorize LIGHT LIGHTGRAY
                        echo " 2. sha256" | colorize LIGHT LIGHTGRAY
                        echo " 3. sha512" | colorize LIGHT LIGHTGRAY
                        echo " 4. ripemd160" | colorize LIGHT LIGHTGRAY
                        echo " 5. whirlpool" | colorize LIGHT LIGHTGRAY
                        echo
                        echo -n "Hash?: " | colorize WHITE
                        read answer

                        case ${answer} in
                            sha1|1)
                                HASH="sha1"
                                ;;
                            sha256|2)
                                HASH="sha256"
                                ;;
                            sha512|3)
                                HASH="sha512"
                                ;;
                            ripemd160|4)
                                HASH="ripemd160"
                                ;;
                            whirlpool|5)
                                HASH="whirlpool"
                                ;;
                            *)
                                echo "Invalid hash!" | colorize RED
                                echo
                                ;;
                        esac
                    done

                    echo

                    while [ -z "$CIPHER" ]; do
                        echo "Choose an encryption algorithm:" | colorize BOLD WHITE
                        echo " 1. aes" | colorize LIGHT LIGHTGRAY
                        echo " 2. twofish" | colorize LIGHT LIGHTGRAY
                        echo " 3. serpent" | colorize LIGHT LIGHTGRAY
                        echo
                        echo -n "Cipher?: " | colorize WHITE
                        read answer

                        case ${answer} in
                            aes|1)
                                CIPHER="aes"
                                ;;
                            twofish|2)
                                CIPHER="twofish"
                                ;;
                            serpent|3)
                                CIPHER="serpent"
                                ;;
                            *)
                                echo "Invalid algorithm!" | colorize RED
                                echo
                                ;;
                        esac
                    done

                    echo

                    while [ -z "$BITS" ]; do
                        echo "Choose a key size, note XTS cuts the actual bits in half:" | colorize BOLD WHITE
                        echo " 1. 256" | colorize LIGHT LIGHTGRAY
                        echo " 2. 512" | colorize LIGHT LIGHTGRAY
                        echo
                        echo -n "Bits?: " | colorize WHITE
                        read answer

                        case ${answer} in
                            256|1)
                                BITS="256"
                                ;;
                            512|2)
                                BITS="512"
                                ;;
                            *)
                                echo "Invalid key size!" | colorize RED
                                echo
                                ;;
                        esac
                    done
                    ;;
                *)
                    HASH="sha1"
                    CIPHER="aes"
                    BITS="256"
                    ;;
            esac

            echo

            # Create private directory if it doesn't exist
            if [ ! -d $PRIVATE_DIR ]; then
                mkdir $PRIVATE_DIR
                sudo chown $WHOAMI $PRIVATE_DIR
                chmod 700 $PRIVATE_DIR
            fi

            # Make the container
            truncate -s $SIZE $PRIVATE_DIR/$1
            sudo chown $WHOAMI $PRIVATE_DIR/$1
            chmod 600 $PRIVATE_DIR/$1

            # Encrypt and open container
            echo -n $PASSWORD | sudo cryptsetup --hash $HASH --cipher $CIPHER-xts-plain64 --key-size $BITS --key-file "-" luksFormat $PRIVATE_DIR/$1
            echo -n $PASSWORD | sudo cryptsetup --key-file "-" luksOpen $PRIVATE_DIR/$1 $1

            # Make the filesystem
            sudo mkfs.ext2 /dev/mapper/$1
            sudo tune2fs -m 0 /dev/mapper/$1

            mountContainer $1

            # Fix permissions on the mounted container
            sudo chown $WHOAMI $MOUNT_DIR/$1
            chmod 700 $MOUNT_DIR/$1
            ;;

        *)
            echo "$PRIVATE_DIR/$1 does not exist, not creating it" | colorize BOLD RED
            exit 1
            ;;
    esac
}


if [ ! -n "$1" ]; then
    echo "No encrypted container name provided" | colorize RED
    exit 1
else
    if mount | grep $MOUNT_DIR/$1 > /dev/null; then

        sudo umount $MOUNT_DIR/$1
        sudo rmdir $MOUNT_DIR/$1
        sudo cryptsetup luksClose $1
        echo "$1 successfully closed!" | colorize BOLD GREEN
        exit
    elif [ ! -f $PRIVATE_DIR/$1 ]; then
        makeContainer $1
        echo "$1 successfully opened!" | colorize BOLD GREEN
        exit
    else
        unlockContainer $1
        mountContainer $1

        echo "$1 successfully opened!" | colorize BOLD GREEN
        exit
    fi
fi



